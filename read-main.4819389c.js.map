{"mappings":"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","sources":["src/js/read.js","src/js/creatCardMarkup.js"],"sourcesContent":["//-------Maks & Serj--------------\nimport {\n  loadReadStorage,\n  removeFromReadStorage,\n  getCurrentDate,\n} from './read-library';\n\nimport { creatCardMarkup } from './creatCardMarkup';\nimport { includeFavoriteNew, excludeFavoriteNew } from './library';\n// import { onButtonFavorite } from './favorite-btn-action';\n\ncreateReadMarkup();\n\nfunction createReadMarkup() {\n  const readObj = loadReadStorage();\n  const keys = Object.keys(readObj);\n\n\n    for (date of keys) {\n      // console.log(readObj[date]); // массивы объектов по датам\n      // Удаление пустого массива из Л.С.\n      if (readObj[date].length === 0) {\n        delete readObj[date];\n\n        localStorage.setItem('read', JSON.stringify(readObj));\n        location.reload();\n      }\n\n      createDateBox(date);\n    }\n\n  for (date of Object.keys(readObj)) {\n    const box = document.querySelector(`[data-date=\"${date}\"]`);\n    const wrapList = document.getElementById(`${date}`);\n    const murkupForBox = createMurkupForBoxItem();\n\n    wrapList.insertAdjacentHTML('beforeend', murkupForBox.join(''));\n  }\n}\n\nfunction createDateBox(date) {\n  const wrapBox = document.querySelector('.wrap-box');\n  const murkup = `<div data-date=\"${date}\" class=\"dateList-wrap\">\n    <div class=\"span-wrap\">\n      <span class=\"date-span open\">${date}<span class=\"arrow\"></span></span>\n    </div>\n    <ul class=\"wrap-list box-news open\" id=\"${date}\"></ul>\n  </div>`;\n\n  const makeMurkup = wrapBox.insertAdjacentHTML('afterbegin', murkup);\n\n  return;\n}\n// Массив разметки.\nfunction createMurkupForBoxItem() {\n  const readObj = loadReadStorage();\n  const getKeyValue = readObj[date]; //массив из объектов\n\n  const createMurkup = getKeyValue.map(el => {\n    const { abstract, title, url, published_date, image_url, section, id } = el;\n    // const foto = media[0] ? media[0]['media-metadata'][2].url : '';\n    const data = published_date.split('-').reverse().join('/');\n\n    return creatCardMarkup(el);\n  });\n\n  return createMurkup;\n}\n\n// console.log(createMurkupForBoxItem());\n\nconst dateSpans = document.querySelectorAll('.date-span');\ndateSpans.forEach(dateSpan => {\n  dateSpan.addEventListener('click', function () {\n    // Отримати ідентифікатор 'id' елемента <ul> за допомогою атрибуту 'id'\n    const id = this.parentElement.parentElement.querySelector('ul').id;\n    // Отримати елемент <ul> а допомогою ідентифікатора 'id'\n    const list = document.getElementById(id);\n    const arrow = dateSpan.querySelector('.arrow');\n    arrow.classList.toggle('arrow-bot');\n    list.classList.toggle('open');\n    // Змінити стиль елемента <ul>, щоб його приховати або показати(без анімації)\n    // if (list.classList.contains('active')) {\n    //   list.classList.remove('active');\n    // } else {\n    //   list.classList.add('active');\n    // }\n  });\n});\n\n\nconst box = document.querySelector('.wrap-box ');\n// console.log(box);\nbox.addEventListener('click', onButtonFavorite);\n\n// ----------------------------------------------------------\n// Без этих функций сердечки не проставляются на нашей странице\n// если массив посылать в favorite-btn-action, то он конфликтует с присланым массивом из news-list\n\nfunction onButtonFavorite(e) {\n  if (e.target.closest('BUTTON')) {\n    // кнопка\n    const favButton = e.target.closest('BUTTON');\n    // ацдишка li\n    const favId = favButton.closest('li').dataset.id;\n    // надпись на кнопке  Add to Favorite\n    const favP = favButton.querySelector('.box-news__favorite-p');\n    // svg\n    const favSvg = favButton.querySelector('.box-news__favorite-svg');\n    console.log(favP);\n\n    if (favButton.classList.contains('favorite')) {\n      offColorBtn(favButton, favId, favP, favSvg);\n    } else {\n      onColorBtn(favButton, favId, favP, favSvg);\n    }\n  }\n}\n\n// Массив объектов getArray\n\nfunction offColorBtn(favButton, favId, favP, favSvg) {\n  for (const el of getArray()) {\n    if (el.id === favId) {\n      const resultDel = excludeFavoriteNew(el.id);\n\n      // const resultDel = true;\n      if (resultDel) {\n        console.log('Удалил');\n        favButton.classList.remove('favorite');\n        favP.classList.remove('favorite-p');\n        favSvg.classList.remove('favorite-svg');\n        favP.textContent = 'Add to Favorite';\n      }\n      return;\n    }\n  }\n}\n\nfunction onColorBtn(favButton, favId, favP, favSvg) {\n  for (const el of getArray()) {\n    if (el.id === favId) {\n      const resultAdd = includeFavoriteNew(el);\n\n      // const resultAdd = true;\n      if (resultAdd) {\n        console.log('Добавил');\n        favButton.classList.add('favorite');\n        favP.classList.add('favorite-p');\n        favSvg.classList.add('favorite-svg');\n        favP.textContent = 'Remove from Favorite';\n      }\n      return;\n    }\n  }\n}\n\n// Рзглаживаем вложенные массивы из нашего Л.С. в плоский массив. \nfunction getArray() {\n  let objRead = loadReadStorage();\n  let arrRead = Object.values(objRead).flat();\n\n  return arrRead;\n}\n","import { loadAllFavorites } from './library';\nimport { loadReadStorage } from './read-library';\n\nfunction creatCardMarkup(el) {\n  const { abstract, title, url, published_date, image_url, section, id } = el;\n\n  const flags = checkRead(el);\n\n  return `<li class=\"box-news__item ${\n    flags.read ? 'show' : ''\n  }\" data-id=\"${id}\">\n      <p class=\"box-news__section\">${section}</p>\n          <div class=\"box-news___wrap-reading\">\n            <span class=\"box-news__reading\">Alredy read</span>\n            <svg class=\"icon\" width=\"18\" height=\"18\">\n              <use href=\"#icon-check\"></use>\n            </svg> \n          </div>\n          <button class=\"box-news__favorite-btn ${flags.fav ? 'favorite' : ''}\">\n              <p class=\"box-news__favorite-p\"> ${\n                flags.fav ? 'Remove from Favorite' : 'Add to Favorite'\n              }</p>\n              <svg class=\"box-news__favorite-svg\" width=\"16\" height=\"16\"\">\n                <use href=\"#icon-heart\"></use>\n              </svg>\n            </button>\n          <article>\n            <div class=\"box-news__thumb\">\n              <img class=\"box-news__img\" src=\"${image_url}\" loading=\"lazy\" alt=\"${section}\" width='440'/>\n            </div>\n          <div class=\"box-news__wrap-title\">\n            <h2 class=\"box-news__titel\">\n              ${title}\n            </h2>\n          </div>\n          <div class=\"box-news__wrap-text\">\n            <p class=\"box-news__text\">\n              ${\n                abstract.length > 120\n                  ? abstract.slice(0, 110) + '...'\n                  : abstract\n              }\n            </p>\n          </div>\n          <div class=\"box-news__wrap\">\n            <p class=\"box-news__data\">${published_date}</p>\n            <a href=\"${url}\" class=\"box-news__link\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Read more</a>\n          </div>\n          </article>\n          <div class=\"overlay\"></div>\n        </li>`;\n}\n\nexport { creatCardMarkup };\n\nfunction checkRead(obj) {\n  let arrFav = loadAllFavorites() || [];\n\n  let objRead = loadReadStorage() || {};\n  let arrRead = Object.values(objRead).flat();\n\n  const answer = arrFav.find(item => obj.id === item.id);\n\n  const reply = arrRead.find(i => obj.id === i.id);\n\n  return (rezult = {\n    fav: answer ? true : false,\n    read: reply ? true : false,\n  });\n}\n"],"names":["$9Ka1f","parcelRequire","$2sH7u","$fb66df559654ca3c$export$c2172e452593faf6","el","abstract","title","url","published_date","image_url","section","id","flags","obj","arrFav","loadAllFavorites","objRead","loadReadStorage","arrRead","Object","values","flat","answer","find","item","reply","i","rezult","fav","read","$fb66df559654ca3c$var$checkRead","length","slice","$103c6abfc3a0e310$var$createDateBox","date","murkup","document","querySelector","insertAdjacentHTML","$103c6abfc3a0e310$var$createMurkupForBoxItem","map","split","reverse","join","readObj","keys","localStorage","setItem","JSON","stringify","location","reload","wrapList","getElementById","murkupForBox","$103c6abfc3a0e310$var$createReadMarkup","querySelectorAll","forEach","dateSpan","addEventListener","this","parentElement","list","classList","toggle","$103c6abfc3a0e310$var$getArray","e","target","closest","favButton","favId","dataset","favP","favSvg","console","log","contains","excludeFavoriteNew","remove","textContent","$103c6abfc3a0e310$var$offColorBtn","includeFavoriteNew","add","$103c6abfc3a0e310$var$onColorBtn"],"version":3,"file":"read-main.4819389c.js.map"}