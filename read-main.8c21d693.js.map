{"mappings":"YAAO,SAASA,IACd,IACE,IAAMC,EAAcC,aAAaC,QAAQ,QAEzC,OAAuB,OAAhBF,EAAuB,GAAKG,KAAKC,MAAMJ,E,CAC9C,MAAOK,GACPC,QAAQC,IAAIF,E,ECyBhB,SAASG,EAAcC,GACrB,IAAMC,EAAUC,SAASC,cAAc,aACjCC,EAAS,mBAEoBC,OAFDL,EAAK,wEAIAK,OAFJL,EAAK,2FAEIK,OAALL,EAAK,qBAGzBC,EAAQK,mBAAmB,aAAcF,E,CAM9D,SAASG,IAkDP,OAjDgBjB,IACYU,MAGzBQ,KAAI,SAAAC,GACH,IAAQC,EAA6DD,EAA7DC,SAAUC,EAAmDF,EAAnDE,MAAOC,EAA4CH,EAA5CG,IAAKC,EAAuCJ,EAAvCI,eAAgBC,EAAuBL,EAAvBK,MAAOC,EAAgBN,EAAhBM,QAASC,EAAOP,EAAPO,GACxDC,EAAOH,EAAM,GAAKA,EAAM,GAAG,kBAAkB,GAAGF,IAAM,GACtDM,EAAOL,EAAeM,MAAM,KAAKC,UAAUC,KAAK,KACtD,MAAO,uCACwBhB,OADeW,EAAG,2CAgBPX,OAfXU,EAAQ,ysBAegCV,OAA7BY,EAAK,0BAIrCZ,OAJ6DU,EAAQ,iJAUrEV,OANAM,EAAM,8IAakBN,OAPxBK,EAASY,OAAS,IACdZ,EAASa,MAAM,EAAG,KAAO,MACzBb,EACL,wHAKQL,OADiBa,EAAK,+BACVb,OAAZO,EAAI,UAAWP,OAAHW,EAAG,0L,IAMjCK,KAAK,G,EA1FV,WACE,IAAMG,EAAUlC,IACVmC,EAAOC,OAAOD,KAAKD,GAEpBG,GAAI,EAAJC,GAAI,EAAJC,OAAIC,E,IAAT,QAAKC,EAAAC,EAAQP,EAAIQ,OAAAC,cAAZP,GAAAI,EAAAC,EAAIG,QAAAC,MAAJT,GAAI,EAAJ3B,KAAA+B,EAAIM,MACPxC,QAAQC,IAAI0B,EAAQxB,OAGS,IAAzBwB,EAAQxB,MAAMsB,gBACTE,EAAQxB,MAEfR,aAAa8C,QAAQ,OAAQ5C,KAAK6C,UAAUf,KAG9CzB,EAAcC,K,UAVX4B,GAAI,EAAJC,EAAIW,C,aAAJb,GAAI,MAAJK,EAAIS,QAAJT,EAAIS,Q,YAAJb,E,MAAAC,C,MAYAa,GAAI,EAAJC,GAAI,EAAJC,OAAId,E,IAAT,QAAKe,EAAAC,EAAQpB,OAAOD,KAAKD,GAAQS,OAAAC,cAA5BQ,GAAAG,EAAAC,EAAIX,QAAAC,MAAJM,GAAI,EAA0B,CAA9B1C,KAAA6C,EAAIR,MACKnC,SAASC,cAAc,eAAoBE,OAALL,KAAK,OAAvD,IACM+C,EAAW7C,SAAS8C,eAAe,GAAQ3C,OAALL,OAC5CH,QAAQC,IAAIiD,GACZ,IAAME,EAAe1C,IAErBwC,EAASzC,mBAAmB,YAAa2C,E,WANtCN,GAAI,EAAJC,EAAIM,C,aAAJR,GAAI,MAAJI,EAAIL,QAAJK,EAAIL,Q,YAAJE,E,MAAAC,C,GAlBPO,GAgGkBjD,SAASkD,iBAAiB,cAClCC,SAAQ,SAAAC,GAChBA,EAASC,iBAAiB,SAAS,WAEe,IAA1CvC,EAAKwC,KAAKC,cAAcA,cAActD,cAAc,MAAMa,GAE1D0C,EAAOxD,SAAS8C,eAAehC,GACvBsC,EAASnD,cAAc,UAC/BwD,UAAUC,OAAO,aACvBF,EAAKC,UAAUC,OAAO,O","sources":["src/js/read-library.js","src/js/read.js"],"sourcesContent":["export function loadReadStorage() {\n  try {\n    const storageRead = localStorage.getItem('read');\n\n    return storageRead === null ? {} : JSON.parse(storageRead);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport function writeReadStorage(object) {\n  removeFromReadStorage(object);\n  const readObj = loadReadStorage();\n  const curDate = getCurrentDate();\n  if (!readObj[curDate]) {\n    readObj[curDate] = [];\n  }\n  readObj[curDate].push(object);\n\n  localStorage.setItem('read', JSON.stringify(readObj));\n}\n\nexport function removeFromReadStorage(obj) {\n  const readObj = loadReadStorage();\n\n  for (key of Object.keys(readObj)) {\n    const indexInArray = readObj[key].findIndex(item => item.id === obj.id);\n    if (indexInArray > -1) {\n      console.log(readObj[key]);\n      readObj[key].splice(indexInArray, 1);\n    }\n  }\n  localStorage.setItem('read', JSON.stringify(readObj));\n}\n\nexport function getCurrentDate() {\n  return new Date().toLocaleString().slice(0, 10).split('.').join('/');\n}","//-------Maks & Serj--------------\nimport { loadReadStorage, removeFromReadStorage, getCurrentDate } from './read-library'\n\ncreateReadMarkup();\n\nfunction createReadMarkup() {\n  const readObj = loadReadStorage();\n  const keys = Object.keys(readObj);\n\n  for (date of keys) {\n    console.log(readObj[date]);\n\n    // Удаление пустого массива из Л.С.\n    if (readObj[date].length === 0) {\n      delete readObj[date];\n\n      localStorage.setItem('read', JSON.stringify(readObj));\n    }\n\n    createDateBox(date);\n  }\n  for (date of Object.keys(readObj)) {\n    const box = document.querySelector(`[data-date=\"${date}\"]`);\n    const wrapList = document.getElementById(`${date}`);\n    console.log(wrapList);\n    const murkupForBox = createMurkupForBoxItem();\n\n    wrapList.insertAdjacentHTML('beforeend', murkupForBox);\n  }\n}\n\nfunction createDateBox(date) {\n  const wrapBox = document.querySelector('.wrap-box');\n  const murkup = `<div data-date=\"${date}\">\n    <div class=\"span-wrap\">\n      <span class=\"date-span open\">${date}<span class=\"arrow\"></span></span>\n    </div>\n    <ul class=\"wrap-list box-news\" id=\"${date}\"></ul>\n  </div>`;\n\n  const makeMurkup = wrapBox.insertAdjacentHTML('afterbegin', murkup);\n\n  return;\n}\n\n\nfunction createMurkupForBoxItem() {\n  const readObj = loadReadStorage();\n  const getKeyValue = readObj[date];\n\n  const createMurkup = getKeyValue\n    .map(el => {\n      const { abstract, title, url, published_date, media, section, id } = el;\n      const foto = media[0] ? media[0]['media-metadata'][2].url : '';\n      const data = published_date.split('-').reverse().join('/');\n      return `<li class=\"box-news__item\" data-id=\"${id}\">\n      <p class=\"box-news__section\">${section}</p>\n          <div class=\"box-news___wrap-reading\">\n            <span class=\"box-news__reading\">Alredy read</span>\n            <svg class=\"icon\" width=\"18\" height=\"18\">\n              <use href=\"#icon-check\"></use>\n            </svg> \n          </div>\n            <button id=\"favorite-btn\" class=\"box-news__favorite-btn\">\n              <p id=\"favorite-p\" class=\"box-news__favorite-p\">Add to Favorite</p>\n              <svg class=\"box-news__favorite-svg\" width=\"16\" height=\"16\" id=\"favorite-svg\">\n                <use href=\"#icon-heart\"></use>\n              </svg>\n            </button>\n          <article>\n            <div class=\"box-news__thumb\">\n              <img class=\"box-news__img\" src=\"${foto}\" loading=\"lazy\" alt=\"${section}\" width='440'/>\n            </div>\n          <div class=\"box-news__wrap-title\">\n            <h2 class=\"box-news__titel\">\n              ${title}\n            </h2>\n          </div>\n          <div class=\"box-news__wrap-text\">\n            <p class=\"box-news__text\">\n              ${\n                abstract.length > 120\n                  ? abstract.slice(0, 110) + '...'\n                  : abstract\n              }\n            </p>\n          </div>\n          <div class=\"box-news__wrap\">\n            <p class=\"box-news__data\">${data}</p>\n            <a href=\"${url}\" id=\"${id}\" class=\"box-news__link\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Read more</a>\n          </div>\n          </article>\n          <div class=\"overlay\"></div>\n        </li>`;\n    })\n    .join('');\n  return createMurkup;\n}\n\nconst dateSpans = document.querySelectorAll('.date-span');\ndateSpans.forEach(dateSpan => {\n  dateSpan.addEventListener('click', function () {\n    // Отримати ідентифікатор 'id' елемента <ul> за допомогою атрибуту 'id'\n    const id = this.parentElement.parentElement.querySelector('ul').id;\n    // Отримати елемент <ul> а допомогою ідентифікатора 'id'\n    const list = document.getElementById(id);\n    const arrow = dateSpan.querySelector('.arrow');\n    arrow.classList.toggle('arrow-bot');\n    list.classList.toggle('open');\n    // Змінити стиль елемента <ul>, щоб його приховати або показати(без анімації)\n    // if (list.classList.contains('active')) {\n    //   list.classList.remove('active');\n    // } else {\n    //   list.classList.add('active');\n    // }\n  });\n});\n\nexport { writeReadStorage };"],"names":["$7c776d4421e955ca$export$fcf14f7a08ef2738","storageRead","localStorage","getItem","JSON","parse","error","console","log","$95b4463fc8ac9448$var$createDateBox","date","wrapBox","document","querySelector","murkup","concat","insertAdjacentHTML","$95b4463fc8ac9448$var$createMurkupForBoxItem","map","el","abstract","title","url","published_date","media","section","id","foto","data","split","reverse","join","length","slice","readObj","keys","Object","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","setItem","stringify","err","return","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","wrapList","getElementById","murkupForBox","err1","$95b4463fc8ac9448$var$createReadMarkup","querySelectorAll","forEach","dateSpan","addEventListener","this","parentElement","list","classList","toggle"],"version":3,"file":"read-main.8c21d693.js.map"}